---
description: Development
globs: 
alwaysApply: true
---

# Referncia pastas #
/docs documentacoes como prd, mdr do projeto
/files arquivos usados para referencia 
/tasks arquivos de todo lists e planejamento de desenvolvimento

# üìè Regras de Desenvolvimento ‚Äî Calculadora de Impostos (`cursor.rule.md`)

Este documento define as regras obrigat√≥rias que devem ser seguidas durante o desenvolvimento da aplica√ß√£o **Calculadora de Impostos para Notas Fiscais**.

---

## ‚úÖ 1. Documenta√ß√£o com JSDoc

Todas as fun√ß√µes devem ser documentadas usando o padr√£o **JSDoc**, mesmo as fun√ß√µes auxiliares. Isso garante legibilidade, padroniza√ß√£o e suporte a ferramentas automatizadas.

### üìå Exemplo:

```ts
/**
 * Calcula o valor bruto necess√°rio para atingir o valor l√≠quido ap√≥s os impostos.
 *
 * @param {number} valorLiquido - O valor l√≠quido que o usu√°rio deseja receber.
 * @param {number} percentualTotal - A soma dos percentuais de impostos aplic√°veis.
 * @returns {number} O valor bruto que dever√° constar na nota fiscal.
 */
function calcularValorBruto(valorLiquido, percentualTotal) {
  return valorLiquido / (1 - percentualTotal / 100);
}
```

---

## üê≥ 2. Uso obrigat√≥rio de Docker e Docker Compose

A aplica√ß√£o **deve ser executada via Docker**, utilizando obrigatoriamente um `Dockerfile` e um `docker-compose.yml`. Nenhuma depend√™ncia ser√° instalada diretamente na m√°quina do desenvolvedor.

### ‚ñ∂Ô∏è Comando padr√£o para execu√ß√£o:

```bash
docker-compose up --build
```

### üì¶ Exemplo de `docker-compose.yml`:

```yaml
version: "3.8"

services:
  app:
    build: .
    ports:
      - "3000:3000"
    volumes:
      - .:/app
    environment:
      - NODE_ENV=development
    command: sh -c "npm install && npm run dev"
```

### üêã Exemplo de `Dockerfile`:

```Dockerfile
FROM node:20-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "run", "dev"]
```

---

## üß™ 3. Valida√ß√£o com Zod

A valida√ß√£o de **todos os inputs do usu√°rio** deve ser feita com a biblioteca [Zod](https://zod.dev/). N√£o utilizar outras bibliotecas como `Yup` ou valida√ß√µes manuais com `if`.

### üì¶ Instala√ß√£o:

```bash
npm install zod
```

### üìå Exemplo de schema:

```ts
import { z } from "zod";

const calculoSchema = z.object({
  valorLiquido: z.number().positive(),
  regimeTributario: z.enum(["MEI", "Simples", "LucroPresumido"]),
});

// Valida√ß√£o
const dados = calculoSchema.parse({
  valorLiquido: 5000,
  regimeTributario: "Simples",
});
```

> üõ°Ô∏è Sempre preferir `.parse()` para valida√ß√£o direta ou `.safeParse()` para tratamento de erros.

---

## üß≠ 4. Conven√ß√µes Gerais

- A aplica√ß√£o ser√° feita com **Next.js** (√∫ltima vers√£o).
- O design ser√° feito com **shadcn/ui** + **TailwindCSS**.
- Todo o c√≥digo ser√° escrito em **TypeScript**.
- Utilizar padr√£o de pastas por **features** (ex: `features/calculadora`, `features/impostos`).
- O c√≥digo deve passar pelas valida√ß√µes de **ESLint** e **Prettier**.
- A l√≥gica de c√°lculo dos impostos deve estar isolada em arquivos dentro de `lib/` ou `services/`.

---

## üìå Resumo

| Requisito                      | Obrigat√≥rio? | Observa√ß√£o                                  |
|-------------------------------|--------------|----------------------------------------------|
| JSDoc para todas as fun√ß√µes   | ‚úÖ           | Sempre usar                                  |
| Docker e Docker Compose       | ‚úÖ           | Nada de `npm install` local                  |
| Valida√ß√£o com Zod             | ‚úÖ           | Nunca usar `Yup`, `Joi`, etc.                |
| Next.js + shadcn/ui           | ‚úÖ           | √öltima vers√£o                                |
| TypeScript                    | ‚úÖ           | Padr√£o em todos os arquivos                  |
| ESLint + Prettier             | ‚úÖ           | Para padroniza√ß√£o de c√≥digo                  |
| Organiza√ß√£o por feature       | ‚úÖ           | Arquitetura escal√°vel                        |

---

_Fim do arquivo._